diff --git a/Makefile b/Makefile
index 413fc25..09d790c 100644
--- a/Makefile
+++ b/Makefile
@@ -181,8 +181,6 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
-	_hello\
-	_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/defs.h b/defs.h
index ad3ecfb..82fb982 100644
--- a/defs.h
+++ b/defs.h
@@ -117,12 +117,9 @@ void            sched(void);
 void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
-int             wait(int*);
+int             wait(void);
 void            wakeup(void*);
 void            yield(void);
-void            hello(void); // J.H.
-void            exit1(int);
-int             waitpid(int, int*, int);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/forktest.c b/forktest.c
index 74e25a0..8bc984d 100644
--- a/forktest.c
+++ b/forktest.c
@@ -34,13 +34,13 @@ forktest(void)
   }
 
   for(; n > 0; n--){
-    if(wait(0) < 0){
+    if(wait() < 0){
       printf(1, "wait stopped early\n");
       exit();
     }
   }
 
-  if(wait(0) != -1){
+  if(wait() != -1){
     printf(1, "wait got too many\n");
     exit();
   }
diff --git a/hello.c b/hello.c
deleted file mode 100644
index b6798ea..0000000
--- a/hello.c
+++ /dev/null
@@ -1,10 +0,0 @@
-#include "types.h"
-#include "user.h"
-
-int
-main (int arg, char **argv)
-{
-    printf(1, "hello cs153\n"); // fd=1 means standard output. exitO;
-    exit1(0);
-    return 0;
-}
\ No newline at end of file
diff --git a/init.c b/init.c
index 47c3d2f..046b551 100644
--- a/init.c
+++ b/init.c
@@ -31,7 +31,7 @@ main(void)
       printf(1, "init: exec sh failed\n");
       exit();
     }
-    while((wpid=wait(0)) >= 0 && wpid != pid)
+    while((wpid=wait()) >= 0 && wpid != pid)
       printf(1, "zombie!\n");
   }
 }
diff --git a/lab1.diff b/lab1.diff
deleted file mode 100644
index 4b0d116..0000000
--- a/lab1.diff
+++ /dev/null
@@ -1,554 +0,0 @@
-diff --git a/Makefile b/Makefile
-index 09d790c..413fc25 100644
---- a/Makefile
-+++ b/Makefile
-@@ -181,6 +181,8 @@ UPROGS=\
- 	_usertests\
- 	_wc\
- 	_zombie\
-+	_hello\
-+	_test\
- 
- fs.img: mkfs README $(UPROGS)
- 	./mkfs fs.img README $(UPROGS)
-diff --git a/defs.h b/defs.h
-index 82fb982..ad3ecfb 100644
---- a/defs.h
-+++ b/defs.h
-@@ -117,9 +117,12 @@ void            sched(void);
- void            setproc(struct proc*);
- void            sleep(void*, struct spinlock*);
- void            userinit(void);
--int             wait(void);
-+int             wait(int*);
- void            wakeup(void*);
- void            yield(void);
-+void            hello(void); // J.H.
-+void            exit1(int);
-+int             waitpid(int, int*, int);
- 
- // swtch.S
- void            swtch(struct context**, struct context*);
-diff --git a/forktest.c b/forktest.c
-index 8bc984d..74e25a0 100644
---- a/forktest.c
-+++ b/forktest.c
-@@ -34,13 +34,13 @@ forktest(void)
-   }
- 
-   for(; n > 0; n--){
--    if(wait() < 0){
-+    if(wait(0) < 0){
-       printf(1, "wait stopped early\n");
-       exit();
-     }
-   }
- 
--  if(wait() != -1){
-+  if(wait(0) != -1){
-     printf(1, "wait got too many\n");
-     exit();
-   }
-diff --git a/init.c b/init.c
-index 046b551..47c3d2f 100644
---- a/init.c
-+++ b/init.c
-@@ -31,7 +31,7 @@ main(void)
-       printf(1, "init: exec sh failed\n");
-       exit();
-     }
--    while((wpid=wait()) >= 0 && wpid != pid)
-+    while((wpid=wait(0)) >= 0 && wpid != pid)
-       printf(1, "zombie!\n");
-   }
- }
-diff --git a/proc.c b/proc.c
-index 806b1b1..a2f7d51 100644
---- a/proc.c
-+++ b/proc.c
-@@ -270,7 +270,7 @@ exit(void)
- // Wait for a child process to exit and return its pid.
- // Return -1 if this process has no children.
- int
--wait(void)
-+wait(int* status)
- {
-   struct proc *p;
-   int havekids, pid;
-@@ -295,6 +295,11 @@ wait(void)
-         p->name[0] = 0;
-         p->killed = 0;
-         p->state = UNUSED;
-+
-+        if(status){
-+          *status = p->exitStatus;
-+        }
-+        p->exitStatus = 0;    //reset the wait status
-         release(&ptable.lock);
-         return pid;
-       }
-@@ -532,3 +537,99 @@ procdump(void)
-     cprintf("\n");
-   }
- }
-+
-+void
-+hello(void){
-+    cprintf("\n\nHello from your kernel space! \n \n");
-+}
-+
-+void
-+exit1(int status)
-+{
-+  struct proc *curproc = myproc();
-+  struct proc *p;
-+  int fd;
-+  curproc->exitStatus = status;
-+  if(curproc == initproc)
-+    panic("init exiting");
-+
-+  // Close all open files.
-+  for(fd = 0; fd < NOFILE; fd++){
-+    if(curproc->ofile[fd]){
-+      fileclose(curproc->ofile[fd]);
-+      curproc->ofile[fd] = 0;
-+    }
-+  }
-+
-+  begin_op();
-+  iput(curproc->cwd);
-+  end_op();
-+  curproc->cwd = 0;
-+
-+  acquire(&ptable.lock);
-+
-+  // Parent might be sleeping in wait().
-+  wakeup1(curproc->parent);
-+
-+  // Pass abandoned children to init.
-+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-+    if(p->parent == curproc){
-+      p->parent = initproc;
-+      if(p->state == ZOMBIE)
-+        wakeup1(initproc);
-+    }
-+  }
-+
-+  // Jump into the scheduler, never to return.
-+  curproc->state = ZOMBIE;
-+  sched();
-+  panic("zombie exit");
-+}
-+
-+// Wait for a child process to exit and return its pid.
-+// Return -1 if this process has no children.int
-+int 
-+waitpid(int pid, int* status, int options)
-+{
-+  struct proc *p;
-+  int havekids; //no more pid bc in conition for waitpid
-+  struct proc *curproc = myproc();
-+  
-+  acquire(&ptable.lock);
-+  for(;;){
-+    // Scan through table looking for exited children.
-+    havekids = 0;
-+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-+      if(p->pid != pid)
-+        continue;
-+      havekids = 1;
-+      if(p->state == ZOMBIE){
-+        // Found one.
-+        pid = p->pid;
-+        kfree(p->kstack);
-+        p->kstack = 0;
-+        freevm(p->pgdir);
-+        p->pid = 0;
-+        p->parent = 0;
-+        p->name[0] = 0;
-+        p->killed = 0;
-+        p->state = UNUSED;
-+
-+        if(status){
-+          *status = p->exitStatus;
-+        } //reset the wait status
-+        release(&ptable.lock);
-+        return pid;
-+      }
-+    }
-+
-+    // No point waiting if we don't have any children.
-+    if(!havekids || curproc->killed){
-+      release(&ptable.lock);
-+      return -1;
-+    }
-+
-+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-+  }
-+}
-diff --git a/proc.h b/proc.h
-index 1647114..2986be4 100644
---- a/proc.h
-+++ b/proc.h
-@@ -49,6 +49,7 @@ struct proc {
-   struct file *ofile[NOFILE];  // Open files
-   struct inode *cwd;           // Current directory
-   char name[16];               // Process name (debugging)
-+  int exitStatus;
- };
- 
- // Process memory is laid out contiguously, low addresses first:
-diff --git a/sh.c b/sh.c
-index 054bab9..29f0beb 100644
---- a/sh.c
-+++ b/sh.c
-@@ -93,7 +93,7 @@ runcmd(struct cmd *cmd)
-     lcmd = (struct listcmd*)cmd;
-     if(fork1() == 0)
-       runcmd(lcmd->left);
--    wait();
-+    wait(0);
-     runcmd(lcmd->right);
-     break;
- 
-@@ -117,8 +117,8 @@ runcmd(struct cmd *cmd)
-     }
-     close(p[0]);
-     close(p[1]);
--    wait();
--    wait();
-+    wait(0);
-+    wait(0);
-     break;
- 
-   case BACK:
-@@ -166,7 +166,7 @@ main(void)
-     }
-     if(fork1() == 0)
-       runcmd(parsecmd(buf));
--    wait();
-+    wait(0);
-   }
-   exit();
- }
-diff --git a/stressfs.c b/stressfs.c
-index c0a4743..a470aa7 100644
---- a/stressfs.c
-+++ b/stressfs.c
-@@ -43,7 +43,7 @@ main(int argc, char *argv[])
-     read(fd, data, sizeof(data));
-   close(fd);
- 
--  wait();
-+  wait(0);
- 
-   exit();
- }
-diff --git a/syscall.c b/syscall.c
-index ee85261..0e8c679 100644
---- a/syscall.c
-+++ b/syscall.c
-@@ -103,6 +103,9 @@ extern int sys_unlink(void);
- extern int sys_wait(void);
- extern int sys_write(void);
- extern int sys_uptime(void);
-+extern int sys_hello(void); // J.H.
-+extern int sys_exit1(void);
-+extern int sys_waitpid(void);
- 
- static int (*syscalls[])(void) = {
- [SYS_fork]    sys_fork,
-@@ -126,6 +129,9 @@ static int (*syscalls[])(void) = {
- [SYS_link]    sys_link,
- [SYS_mkdir]   sys_mkdir,
- [SYS_close]   sys_close,
-+[SYS_hello]   sys_hello, // J.H.
-+[SYS_exit1]   sys_exit1,
-+[SYS_waitpid] sys_waitpid,
- };
- 
- void
-diff --git a/syscall.h b/syscall.h
-index bc5f356..a0b9b6c 100644
---- a/syscall.h
-+++ b/syscall.h
-@@ -20,3 +20,6 @@
- #define SYS_link   19
- #define SYS_mkdir  20
- #define SYS_close  21
-+#define SYS_hello  22 // J.H.
-+#define SYS_exit1  23
-+#define SYS_waitpid 24
-\ No newline at end of file
-diff --git a/sysproc.c b/sysproc.c
-index 0686d29..87b816a 100644
---- a/sysproc.c
-+++ b/sysproc.c
-@@ -23,7 +23,10 @@ sys_exit(void)
- int
- sys_wait(void)
- {
--  return wait();
-+  int* waitStatus;
-+  if (argptr(0, (char**)&waitStatus, sizeof(waitStatus)) <0)
-+    return -1;
-+  return wait(waitStatus);
- }
- 
- int
-@@ -89,3 +92,29 @@ sys_uptime(void)
-   release(&tickslock);
-   return xticks;
- }
-+
-+int sys_hello(void){
-+  hello();
-+  return 0;
-+}
-+
-+int
-+sys_exit1(void)
-+{
-+  int exitStatus;
-+  if (argint(0, &exitStatus) < 0)
-+    return -1;
-+  exit1(exitStatus);
-+  return 0;  // not reached
-+}
-+
-+int
-+sys_waitpid(void)
-+{
-+  int pid;
-+  int options = 0;
-+  int* waitStatus;
-+  if ((argptr(1, (void*)&waitStatus, sizeof(waitStatus)) <0)|| (argint(0, &pid)<0))
-+    return -1;
-+  return waitpid(pid, waitStatus, options); // int waitpid(int pid, int *status, int options);
-+}
-\ No newline at end of file
-diff --git a/user.h b/user.h
-index 4f99c52..07765ee 100644
---- a/user.h
-+++ b/user.h
-@@ -4,9 +4,9 @@ struct rtcdate;
- // system calls
- int fork(void);
- int exit(void) __attribute__((noreturn));
--int wait(void);
-+int wait (int*);
- int pipe(int*);
--int write(int, const void*, int);
-+int write(int, const void*, int); 
- int read(int, void*, int);
- int close(int);
- int kill(int);
-@@ -23,6 +23,10 @@ int getpid(void);
- char* sbrk(int);
- int sleep(int);
- int uptime(void);
-+int hello(void); // J.H.
-+void exit1(int); 
-+int waitpid(int, int*, int);
-+
- 
- // ulib.c
- int stat(const char*, struct stat*);
-diff --git a/usertests.c b/usertests.c
-index a1e97e7..9140ff1 100644
---- a/usertests.c
-+++ b/usertests.c
-@@ -66,7 +66,7 @@ exitiputtest(void)
-     }
-     exit();
-   }
--  wait();
-+  wait(0);
-   printf(stdout, "exitiput test ok\n");
- }
- 
-@@ -109,7 +109,7 @@ openiputtest(void)
-     printf(stdout, "unlink failed\n");
-     exit();
-   }
--  wait();
-+  wait(0);
-   printf(stdout, "openiput test ok\n");
- }
- 
-@@ -346,7 +346,7 @@ pipe1(void)
-       exit();
-     }
-     close(fds[0]);
--    wait();
-+    wait(0);
-   } else {
-     printf(1, "fork() failed\n");
-     exit();
-@@ -394,9 +394,9 @@ preempt(void)
-   kill(pid2);
-   kill(pid3);
-   printf(1, "wait... ");
--  wait();
--  wait();
--  wait();
-+  wait(0);
-+  wait(0);
-+  wait(0);
-   printf(1, "preempt ok\n");
- }
- 
-@@ -413,7 +413,7 @@ exitwait(void)
-       return;
-     }
-     if(pid){
--      if(wait() != pid){
-+      if(wait(0) != pid){
-         printf(1, "wait wrong pid\n");
-         return;
-       }
-@@ -453,7 +453,7 @@ mem(void)
-     printf(1, "mem ok\n");
-     exit();
-   } else {
--    wait();
-+    wait(0);
-   }
- }
- 
-@@ -486,7 +486,7 @@ sharedfd(void)
-   if(pid == 0)
-     exit();
-   else
--    wait();
-+    wait(0);
-   close(fd);
-   fd = open("sharedfd", 0);
-   if(fd < 0){
-@@ -552,7 +552,7 @@ fourfiles(void)
-   }
- 
-   for(pi = 0; pi < 4; pi++){
--    wait();
-+    wait(0);
-   }
- 
-   for(i = 0; i < 2; i++){
-@@ -620,7 +620,7 @@ createdelete(void)
-   }
- 
-   for(pi = 0; pi < 4; pi++){
--    wait();
-+    wait(0);
-   }
- 
-   name[0] = name[1] = name[2] = 0;
-@@ -794,7 +794,7 @@ concreate(void)
-     if(pid == 0)
-       exit();
-     else
--      wait();
-+      wait(0);
-   }
- 
-   memset(fa, 0, sizeof(fa));
-@@ -846,7 +846,7 @@ concreate(void)
-     if(pid == 0)
-       exit();
-     else
--      wait();
-+      wait(0);
-   }
- 
-   printf(1, "concreate ok\n");
-@@ -881,7 +881,7 @@ linkunlink()
-   }
- 
-   if(pid)
--    wait();
-+    wait(0);
-   else
-     exit();
- 
-@@ -1397,13 +1397,13 @@ forktest(void)
-   }
- 
-   for(; n > 0; n--){
--    if(wait() < 0){
-+    if(wait(0) < 0){
-       printf(1, "wait stopped early\n");
-       exit();
-     }
-   }
- 
--  if(wait() != -1){
-+  if(wait(0) != -1){
-     printf(1, "wait got too many\n");
-     exit();
-   }
-@@ -1446,7 +1446,7 @@ sbrktest(void)
-   }
-   if(pid == 0)
-     exit();
--  wait();
-+  wait(0);
- 
-   // can one grow address space to something big?
- #define BIG (100*1024*1024)
-@@ -1506,7 +1506,7 @@ sbrktest(void)
-       kill(ppid);
-       exit();
-     }
--    wait();
-+    wait(0);
-   }
- 
-   // if we run the system out of memory, does it clean up the last
-@@ -1533,7 +1533,7 @@ sbrktest(void)
-     if(pids[i] == -1)
-       continue;
-     kill(pids[i]);
--    wait();
-+    wait(0);
-   }
-   if(c == (char*)0xffffffff){
-     printf(stdout, "failed sbrk leaked memory\n");
-@@ -1577,7 +1577,7 @@ validatetest(void)
-     sleep(0);
-     sleep(0);
-     kill(pid);
--    wait();
-+    wait(0);
- 
-     // try to crash the kernel by passing in a bad string pointer
-     if(link("nosuchfile", (char*)p) != -1){
-@@ -1632,7 +1632,7 @@ bigargtest(void)
-     printf(stdout, "bigargtest: fork failed\n");
-     exit();
-   }
--  wait();
-+  wait(0);
-   fd = open("bigarg-ok", 0);
-   if(fd < 0){
-     printf(stdout, "bigarg test failed!\n");
-@@ -1720,7 +1720,7 @@ uio()
-     printf (1, "fork failed\n");
-     exit();
-   }
--  wait();
-+  wait(0);
-   printf(1, "uio test done\n");
- }
- 
-diff --git a/usys.S b/usys.S
-index 8bfd8a1..9ebc9d1 100644
---- a/usys.S
-+++ b/usys.S
-@@ -29,3 +29,6 @@ SYSCALL(getpid)
- SYSCALL(sbrk)
- SYSCALL(sleep)
- SYSCALL(uptime)
-+SYSCALL(hello) // J.H.
-+SYSCALL(exit1)
-+SYSCALL(waitpid)
diff --git a/labTest.c b/labTest.c
deleted file mode 100644
index b947ef4..0000000
--- a/labTest.c
+++ /dev/null
@@ -1,103 +0,0 @@
-#include "types.h"
-#include "user.h"
-
-#define WNOHANG 	1
-
-int main(int argc, char *argv[])
-{
-	
-	int exitWait(void);
-	int waitPid(void);
-
-  printf(1, "\n This program tests the correctness of your lab#1\n");
-  
-  if (atoi(argv[1]) == 1)
-	exitWait();
-  else if (atoi(argv[1]) == 2)
-	waitPid();
-  else 
-   printf(1, "\ntype \"%s 1\" to test exit and wait, \"%s 2\" to test waitpid\n", argv[0], argv[0]);
-  
-    // End of test
-	 exit1(0);
-	 return 0;
- }
-  
-int exitWait(void) {
-	  int pid, ret_pid, exit_status;
-    int i;
-  // use this part to test exit(int status) and wait(int* status)
- 
-  printf(1, "\n  Parts a & b) testing exit(int status) and wait(int* status):\n");
-
-  for (i = 0; i < 2; i++) {
-    pid = fork();
-    if (pid == 0) { // only the child executed this code
-      if (i == 0){
-        printf(1, "\nThis is child with PID# %d and I will exit with status %d\n", getpid(), 0);
-        exit1(0);
-      }
-      else{
-	      printf(1, "\nThis is child with PID# %d and I will exit with status %d\n" ,getpid(), -1);
-        exit1(-1);
-      } 
-    } else if (pid > 0) { // only the parent executes this code
-      ret_pid = wait(&exit_status);
-      printf(1, "\n This is the parent: child with PID# %d has exited with status %d\n", ret_pid, exit_status);
-    } else { // something went wrong with fork system call
-	    printf(2, "\nError using fork\n");
-      exit1(-1);
-    }
-  }
-  return 0;
-}
-
-int waitPid(void){
-	
-  int ret_pid, exit_status;
-  int i;
-  int pid_a[5]={0, 0, 0, 0, 0};
- // use this part to test wait(int pid, int* status, int options)
-
-  printf(1, "\n  Part c) testing waitpid(int pid, int* status, int options):\n");
-
-	for (i = 0; i <5; i++) {
-		pid_a[i] = fork();
-		if (pid_a[i] == 0) { // only the child executed this code
-			printf(1, "\n This is child with PID# %d and I will exit with status %d\n", getpid(), getpid() + 4);
-			exit1(getpid() + 4);
-		}
-	}
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[3]);
-  ret_pid = waitpid(pid_a[3], &exit_status, 0);
-  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[3] + 4);
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[1]);
-  ret_pid = waitpid(pid_a[1], &exit_status, 0);
-  printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[1] + 4);
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[2]);
-  ret_pid = waitpid(pid_a[2], &exit_status, 0);
-  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[2] + 4);
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[0]);
-  ret_pid = waitpid(pid_a[0], &exit_status, 0);
-  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[0] + 4);
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[4]);
-  ret_pid = waitpid(pid_a[4], &exit_status, 0);
-  printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[4] + 4);
-
-
-  printf(1, "\n This is the parent: Now try to wait for a invalid Number, this should not get stuck..\n");
-  ret_pid = waitpid(9999, &exit_status, 0);
-  printf(1, "\n This is the parent: Child# 9999 has ret code %d, expected: -1\n",ret_pid);
-  //printf(1, "\n This is the parent: Child# %d has exited with status %d\n",ret_pid, exit_status);
-
-  printf(1, "\n This is the parent: Now try to give invalid argument.\n");
-  ret_pid = waitpid(9999, (int*) 0xffffffff, 0);
-  printf(1, "\n This is the parent: Got ret code %d, expected: -1\n",ret_pid);
-
-  return 0;
-}
\ No newline at end of file
diff --git a/proc.c b/proc.c
index a2f7d51..806b1b1 100644
--- a/proc.c
+++ b/proc.c
@@ -270,7 +270,7 @@ exit(void)
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
-wait(int* status)
+wait(void)
 {
   struct proc *p;
   int havekids, pid;
@@ -295,11 +295,6 @@ wait(int* status)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
-
-        if(status){
-          *status = p->exitStatus;
-        }
-        p->exitStatus = 0;    //reset the wait status
         release(&ptable.lock);
         return pid;
       }
@@ -537,99 +532,3 @@ procdump(void)
     cprintf("\n");
   }
 }
-
-void
-hello(void){
-    cprintf("\n\nHello from your kernel space! \n \n");
-}
-
-void
-exit1(int status)
-{
-  struct proc *curproc = myproc();
-  struct proc *p;
-  int fd;
-  curproc->exitStatus = status;
-  if(curproc == initproc)
-    panic("init exiting");
-
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
-      fileclose(curproc->ofile[fd]);
-      curproc->ofile[fd] = 0;
-    }
-  }
-
-  begin_op();
-  iput(curproc->cwd);
-  end_op();
-  curproc->cwd = 0;
-
-  acquire(&ptable.lock);
-
-  // Parent might be sleeping in wait().
-  wakeup1(curproc->parent);
-
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
-      p->parent = initproc;
-      if(p->state == ZOMBIE)
-        wakeup1(initproc);
-    }
-  }
-
-  // Jump into the scheduler, never to return.
-  curproc->state = ZOMBIE;
-  sched();
-  panic("zombie exit");
-}
-
-// Wait for a child process to exit and return its pid.
-// Return -1 if this process has no children.int
-int 
-waitpid(int pid, int* status, int options)
-{
-  struct proc *p;
-  int havekids; //no more pid bc in conition for waitpid
-  struct proc *curproc = myproc();
-  
-  acquire(&ptable.lock);
-  for(;;){
-    // Scan through table looking for exited children.
-    havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->pid != pid)
-        continue;
-      havekids = 1;
-      if(p->state == ZOMBIE){
-        // Found one.
-        pid = p->pid;
-        kfree(p->kstack);
-        p->kstack = 0;
-        freevm(p->pgdir);
-        p->pid = 0;
-        p->parent = 0;
-        p->name[0] = 0;
-        p->killed = 0;
-        p->state = UNUSED;
-
-        if(status){
-          *status = p->exitStatus;
-        } //reset the wait status
-        release(&ptable.lock);
-        return pid;
-      }
-    }
-
-    // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
-      release(&ptable.lock);
-      return -1;
-    }
-
-    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-  }
-}
diff --git a/proc.h b/proc.h
index 2986be4..1647114 100644
--- a/proc.h
+++ b/proc.h
@@ -49,7 +49,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
-  int exitStatus;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/sh.c b/sh.c
index 29f0beb..054bab9 100644
--- a/sh.c
+++ b/sh.c
@@ -93,7 +93,7 @@ runcmd(struct cmd *cmd)
     lcmd = (struct listcmd*)cmd;
     if(fork1() == 0)
       runcmd(lcmd->left);
-    wait(0);
+    wait();
     runcmd(lcmd->right);
     break;
 
@@ -117,8 +117,8 @@ runcmd(struct cmd *cmd)
     }
     close(p[0]);
     close(p[1]);
-    wait(0);
-    wait(0);
+    wait();
+    wait();
     break;
 
   case BACK:
@@ -166,7 +166,7 @@ main(void)
     }
     if(fork1() == 0)
       runcmd(parsecmd(buf));
-    wait(0);
+    wait();
   }
   exit();
 }
diff --git a/stressfs.c b/stressfs.c
index a470aa7..c0a4743 100644
--- a/stressfs.c
+++ b/stressfs.c
@@ -43,7 +43,7 @@ main(int argc, char *argv[])
     read(fd, data, sizeof(data));
   close(fd);
 
-  wait(0);
+  wait();
 
   exit();
 }
diff --git a/syscall.c b/syscall.c
index 0e8c679..ee85261 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,9 +103,6 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
-extern int sys_hello(void); // J.H.
-extern int sys_exit1(void);
-extern int sys_waitpid(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -129,9 +126,6 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
-[SYS_hello]   sys_hello, // J.H.
-[SYS_exit1]   sys_exit1,
-[SYS_waitpid] sys_waitpid,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index a0b9b6c..bc5f356 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,6 +20,3 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
-#define SYS_hello  22 // J.H.
-#define SYS_exit1  23
-#define SYS_waitpid 24
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 87b816a..0686d29 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -23,10 +23,7 @@ sys_exit(void)
 int
 sys_wait(void)
 {
-  int* waitStatus;
-  if (argptr(0, (char**)&waitStatus, sizeof(waitStatus)) <0)
-    return -1;
-  return wait(waitStatus);
+  return wait();
 }
 
 int
@@ -92,29 +89,3 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
-
-int sys_hello(void){
-  hello();
-  return 0;
-}
-
-int
-sys_exit1(void)
-{
-  int exitStatus;
-  if (argint(0, &exitStatus) < 0)
-    return -1;
-  exit1(exitStatus);
-  return 0;  // not reached
-}
-
-int
-sys_waitpid(void)
-{
-  int pid;
-  int options = 0;
-  int* waitStatus;
-  if ((argptr(1, (void*)&waitStatus, sizeof(waitStatus)) <0)|| (argint(0, &pid)<0))
-    return -1;
-  return waitpid(pid, waitStatus, options); // int waitpid(int pid, int *status, int options);
-}
\ No newline at end of file
diff --git a/test.c b/test.c
deleted file mode 100644
index b947ef4..0000000
--- a/test.c
+++ /dev/null
@@ -1,103 +0,0 @@
-#include "types.h"
-#include "user.h"
-
-#define WNOHANG 	1
-
-int main(int argc, char *argv[])
-{
-	
-	int exitWait(void);
-	int waitPid(void);
-
-  printf(1, "\n This program tests the correctness of your lab#1\n");
-  
-  if (atoi(argv[1]) == 1)
-	exitWait();
-  else if (atoi(argv[1]) == 2)
-	waitPid();
-  else 
-   printf(1, "\ntype \"%s 1\" to test exit and wait, \"%s 2\" to test waitpid\n", argv[0], argv[0]);
-  
-    // End of test
-	 exit1(0);
-	 return 0;
- }
-  
-int exitWait(void) {
-	  int pid, ret_pid, exit_status;
-    int i;
-  // use this part to test exit(int status) and wait(int* status)
- 
-  printf(1, "\n  Parts a & b) testing exit(int status) and wait(int* status):\n");
-
-  for (i = 0; i < 2; i++) {
-    pid = fork();
-    if (pid == 0) { // only the child executed this code
-      if (i == 0){
-        printf(1, "\nThis is child with PID# %d and I will exit with status %d\n", getpid(), 0);
-        exit1(0);
-      }
-      else{
-	      printf(1, "\nThis is child with PID# %d and I will exit with status %d\n" ,getpid(), -1);
-        exit1(-1);
-      } 
-    } else if (pid > 0) { // only the parent executes this code
-      ret_pid = wait(&exit_status);
-      printf(1, "\n This is the parent: child with PID# %d has exited with status %d\n", ret_pid, exit_status);
-    } else { // something went wrong with fork system call
-	    printf(2, "\nError using fork\n");
-      exit1(-1);
-    }
-  }
-  return 0;
-}
-
-int waitPid(void){
-	
-  int ret_pid, exit_status;
-  int i;
-  int pid_a[5]={0, 0, 0, 0, 0};
- // use this part to test wait(int pid, int* status, int options)
-
-  printf(1, "\n  Part c) testing waitpid(int pid, int* status, int options):\n");
-
-	for (i = 0; i <5; i++) {
-		pid_a[i] = fork();
-		if (pid_a[i] == 0) { // only the child executed this code
-			printf(1, "\n This is child with PID# %d and I will exit with status %d\n", getpid(), getpid() + 4);
-			exit1(getpid() + 4);
-		}
-	}
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[3]);
-  ret_pid = waitpid(pid_a[3], &exit_status, 0);
-  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[3] + 4);
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[1]);
-  ret_pid = waitpid(pid_a[1], &exit_status, 0);
-  printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[1] + 4);
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[2]);
-  ret_pid = waitpid(pid_a[2], &exit_status, 0);
-  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[2] + 4);
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[0]);
-  ret_pid = waitpid(pid_a[0], &exit_status, 0);
-  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[0] + 4);
-  sleep(5);
-  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[4]);
-  ret_pid = waitpid(pid_a[4], &exit_status, 0);
-  printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[4] + 4);
-
-
-  printf(1, "\n This is the parent: Now try to wait for a invalid Number, this should not get stuck..\n");
-  ret_pid = waitpid(9999, &exit_status, 0);
-  printf(1, "\n This is the parent: Child# 9999 has ret code %d, expected: -1\n",ret_pid);
-  //printf(1, "\n This is the parent: Child# %d has exited with status %d\n",ret_pid, exit_status);
-
-  printf(1, "\n This is the parent: Now try to give invalid argument.\n");
-  ret_pid = waitpid(9999, (int*) 0xffffffff, 0);
-  printf(1, "\n This is the parent: Got ret code %d, expected: -1\n",ret_pid);
-
-  return 0;
-}
\ No newline at end of file
diff --git a/user.h b/user.h
index 07765ee..4f99c52 100644
--- a/user.h
+++ b/user.h
@@ -4,9 +4,9 @@ struct rtcdate;
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
-int wait (int*);
+int wait(void);
 int pipe(int*);
-int write(int, const void*, int); 
+int write(int, const void*, int);
 int read(int, void*, int);
 int close(int);
 int kill(int);
@@ -23,10 +23,6 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-int hello(void); // J.H.
-void exit1(int); 
-int waitpid(int, int*, int);
-
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usertests.c b/usertests.c
index 9140ff1..a1e97e7 100644
--- a/usertests.c
+++ b/usertests.c
@@ -66,7 +66,7 @@ exitiputtest(void)
     }
     exit();
   }
-  wait(0);
+  wait();
   printf(stdout, "exitiput test ok\n");
 }
 
@@ -109,7 +109,7 @@ openiputtest(void)
     printf(stdout, "unlink failed\n");
     exit();
   }
-  wait(0);
+  wait();
   printf(stdout, "openiput test ok\n");
 }
 
@@ -346,7 +346,7 @@ pipe1(void)
       exit();
     }
     close(fds[0]);
-    wait(0);
+    wait();
   } else {
     printf(1, "fork() failed\n");
     exit();
@@ -394,9 +394,9 @@ preempt(void)
   kill(pid2);
   kill(pid3);
   printf(1, "wait... ");
-  wait(0);
-  wait(0);
-  wait(0);
+  wait();
+  wait();
+  wait();
   printf(1, "preempt ok\n");
 }
 
@@ -413,7 +413,7 @@ exitwait(void)
       return;
     }
     if(pid){
-      if(wait(0) != pid){
+      if(wait() != pid){
         printf(1, "wait wrong pid\n");
         return;
       }
@@ -453,7 +453,7 @@ mem(void)
     printf(1, "mem ok\n");
     exit();
   } else {
-    wait(0);
+    wait();
   }
 }
 
@@ -486,7 +486,7 @@ sharedfd(void)
   if(pid == 0)
     exit();
   else
-    wait(0);
+    wait();
   close(fd);
   fd = open("sharedfd", 0);
   if(fd < 0){
@@ -552,7 +552,7 @@ fourfiles(void)
   }
 
   for(pi = 0; pi < 4; pi++){
-    wait(0);
+    wait();
   }
 
   for(i = 0; i < 2; i++){
@@ -620,7 +620,7 @@ createdelete(void)
   }
 
   for(pi = 0; pi < 4; pi++){
-    wait(0);
+    wait();
   }
 
   name[0] = name[1] = name[2] = 0;
@@ -794,7 +794,7 @@ concreate(void)
     if(pid == 0)
       exit();
     else
-      wait(0);
+      wait();
   }
 
   memset(fa, 0, sizeof(fa));
@@ -846,7 +846,7 @@ concreate(void)
     if(pid == 0)
       exit();
     else
-      wait(0);
+      wait();
   }
 
   printf(1, "concreate ok\n");
@@ -881,7 +881,7 @@ linkunlink()
   }
 
   if(pid)
-    wait(0);
+    wait();
   else
     exit();
 
@@ -1397,13 +1397,13 @@ forktest(void)
   }
 
   for(; n > 0; n--){
-    if(wait(0) < 0){
+    if(wait() < 0){
       printf(1, "wait stopped early\n");
       exit();
     }
   }
 
-  if(wait(0) != -1){
+  if(wait() != -1){
     printf(1, "wait got too many\n");
     exit();
   }
@@ -1446,7 +1446,7 @@ sbrktest(void)
   }
   if(pid == 0)
     exit();
-  wait(0);
+  wait();
 
   // can one grow address space to something big?
 #define BIG (100*1024*1024)
@@ -1506,7 +1506,7 @@ sbrktest(void)
       kill(ppid);
       exit();
     }
-    wait(0);
+    wait();
   }
 
   // if we run the system out of memory, does it clean up the last
@@ -1533,7 +1533,7 @@ sbrktest(void)
     if(pids[i] == -1)
       continue;
     kill(pids[i]);
-    wait(0);
+    wait();
   }
   if(c == (char*)0xffffffff){
     printf(stdout, "failed sbrk leaked memory\n");
@@ -1577,7 +1577,7 @@ validatetest(void)
     sleep(0);
     sleep(0);
     kill(pid);
-    wait(0);
+    wait();
 
     // try to crash the kernel by passing in a bad string pointer
     if(link("nosuchfile", (char*)p) != -1){
@@ -1632,7 +1632,7 @@ bigargtest(void)
     printf(stdout, "bigargtest: fork failed\n");
     exit();
   }
-  wait(0);
+  wait();
   fd = open("bigarg-ok", 0);
   if(fd < 0){
     printf(stdout, "bigarg test failed!\n");
@@ -1720,7 +1720,7 @@ uio()
     printf (1, "fork failed\n");
     exit();
   }
-  wait(0);
+  wait();
   printf(1, "uio test done\n");
 }
 
diff --git a/usys.S b/usys.S
index 9ebc9d1..8bfd8a1 100644
--- a/usys.S
+++ b/usys.S
@@ -29,6 +29,3 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
-SYSCALL(hello) // J.H.
-SYSCALL(exit1)
-SYSCALL(waitpid)
